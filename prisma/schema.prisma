generator client {
  provider = "prisma-client-js"
}

generator zod {
  provider = "prisma-zod-generator"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String       @id @default(cuid())
  email              String?      @unique
  firstName          String
  lastName           String?
  updatedAt          DateTime     @updatedAt
  emailVerified      DateTime?
  createdAt          DateTime     @default(now())
  finishedOnboarding Boolean      @default(false)
  accounts           Account[]
  responses          Response[]
  sessions           Session[]
  courses            UserCourse[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])
}

model Course {
  id        Int             @id @default(autoincrement())
  title     String          @db.VarChar(255)
  code      String          @unique
  color     String
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  sessions  CourseSession[]
  schedules Schedule[]
  users     UserCourse[]
}

model UserCourse {
  userId   String
  courseId Int
  role     Role     @default(STUDENT)
  linkedAt DateTime @default(now())
  course   Course   @relation(fields: [courseId], references: [id])
  user     User     @relation(fields: [userId], references: [id])

  @@id([userId, courseId])
}

model Schedule {
  id        Int      @id @default(autoincrement())
  courseId  Int
  dayOfWeek String[]
  startTime String
  endTime   String
  course    Course   @relation(fields: [courseId], references: [id])
}

model CourseSession {
  id        Int        @id @default(autoincrement())
  courseId  Int
  startTime DateTime   @default(now())
  endTime   DateTime?
  course    Course     @relation(fields: [courseId], references: [id])
  questions Question[]
  activeQuestionId Int?
}

model Question {
  id        Int           @id @default(autoincrement())
  sessionId Int
  text      String        @db.VarChar(1024)
  type      QuestionType  @default(MCQ)
  options   Option[]
  session   CourseSession @relation(fields: [sessionId], references: [id])
  position Int  @default(0)
  responses Response[]
}

model Option {
  id         Int        @id @default(autoincrement())
  questionId Int
  text       String     @db.VarChar(1024)
  isCorrect  Boolean
  question   Question   @relation(fields: [questionId], references: [id])
  responses  Response[]
}

model Response {
  userId     String
  questionId Int
  optionId   Int
  answeredAt DateTime @default(now())
  option     Option   @relation(fields: [optionId], references: [id])
  question   Question @relation(fields: [questionId], references: [id])
  user       User     @relation(fields: [userId], references: [id])

  @@id([userId, questionId, optionId])
}

enum Role {
  LECTURER
  STUDENT
}

enum QuestionType {
  MCQ
  MSQ
}
